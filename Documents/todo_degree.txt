import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@Service
public class DegreeService {

    private final DegreeRepository degreeRepository;
    private final CollegeRepository collegeRepository;
    private final CourseRepository courseRepository;
    private final ExplainerRepository explainerRepository;

    public DegreeService(
            DegreeRepository degreeRepository,
            CollegeRepository collegeRepository,
            CourseRepository courseRepository,
            ExplainerRepository explainerRepository
    ) {
        this.degreeRepository = degreeRepository;
        this.collegeRepository = collegeRepository;
        this.courseRepository = courseRepository;
        this.explainerRepository = explainerRepository;
    }

    @Transactional
    public Degree createDegreeWithRelatedEntities(@Valid @NotNull Degree degree) {
        // Save the College
        College savedCollege = collegeRepository.save(degree.getCollege());
        degree.setCollege(savedCollege);

        // Save the Course(s)
        degree.getCourses().forEach(course -> {
            Course savedCourse = courseRepository.save(course);
            course.setDegree(degree);
        });

        // Save the Explainer(s)
        degree.getCourses().forEach(course -> {
            course.getExplainers().forEach(explainer -> {
                Explainer savedExplainer = explainerRepository.save(explainer);
                explainer.setCourse(course);
            });
        });

        // Save the Degree
        return degreeRepository.save(degree);
    }
}



{
  "degreeName": "Engineering Technology",
  "college": {
    "name": "Oxford University"
  },
  "courses": [
    {
      "courseName": "Computer Science",
      "explainers": [
        {
          "explainerName": "John Doe",
          "email": "johndoe@example.com",
          "appointments": [
            {
              "student": {
                "studentName": "Alice",
                "email": "alice@example.com",
                "appointments": ["Appointment 1", "Appointment 2"]
              },
              "explainer": "John Doe",
              "startTime": "2023-09-07T19:42:25.732Z",
              "expectedEndTime": "2023-09-07T19:42:25.732Z"
            },
            {
              "student": {
                "studentName": "Bob",
                "email": "bob@example.com",
                "appointments": ["Appointment 3"]
              },
              "explainer": "John Doe",
              "startTime": "2023-09-08T10:00:00.000Z",
              "expectedEndTime": "2023-09-08T11:00:00.000Z"
            }
          ]
        }
      ]
    }
  ]
}


package ufp.esof.project.controllers;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import ufp.esof.project.exception.ObjectNotFoundById;
import ufp.esof.project.persistence.model.College;
import ufp.esof.project.persistence.model.Course;
import ufp.esof.project.persistence.model.Degree;
import ufp.esof.project.services.DegreeServiceImpl;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(DegreeController.class)
class DegreeControllerTest {

    @MockBean
    DegreeServiceImpl degreeServiceMock;
    @Autowired
    private MockMvc mockMvc;

    Degree degree;

    @BeforeEach
    void setUp() {
        degree = new Degree(1L,"Data Analytic",new HashSet<>(),new College("Oxford University"));
    }

    @Test
    @DisplayName("GET /api/v1/degree - Success")
    void testGetAllDegrees() throws Exception {
        when(degreeServiceMock.findAllDegree())
                .thenReturn(List.of(
                        new Degree(1L,"Data Analytic",new HashSet<>(),new College("Oxford University")),
                        new Degree(234L,"AI Scientific",new HashSet<>(),new College("University Fernando Pessoa"))
                ));
        // Execute the Get request
        this.mockMvc
                .perform(get("/api/v1/degree"))
                //Validate the response code and content
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
                //Validate the return fields
                .andExpect(jsonPath("$.size()").value(2))
                .andExpect(jsonPath("$[0].degreeId").value(1L))
                .andExpect(jsonPath("$[0].degreeName").value("Data Analytic"));

             verify(degreeServiceMock,times(1)).findAllDegree();

    }

    @Test
    @DisplayName("GET /api/v1/degree/1 - Success")
    void testGetAppointmentByIdFound() throws Exception {
        when(degreeServiceMock.findDegreeById(1L))
                .thenReturn(Optional.of(degree));
        // Execute the Get request
        this.mockMvc
                .perform(get("/api/v1/degree/{id}",1))
                //Validate the response code and content
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))

                //Validate the return fields
                .andExpect(jsonPath("$.size()").value(3))
                .andExpect(jsonPath("$.id").value(1L));

        verify(degreeServiceMock, times(1)).findDegreeById(1L);

    }

    @Test
    @DisplayName("GET /api/v1/degree/1 - Not Found")
    void testGetAppointmentByIdNotFound() throws Exception {
        when(degreeServiceMock.findDegreeById(1L))
                .thenThrow(new ObjectNotFoundById("degree not found"));

        // Act: Execute the GET request
        this.mockMvc
                .perform(get("/api/v1/degree/{id}", 1L)) // Assuming you're testing with ID 1
                // Assert: Validate the response code
                .andExpect(status().isNotFound());
    }
    @Test
    @DisplayName("POST /api/v1/degree/create - Success")
    void testPostSaveAppointmentSuccess() throws Exception {
        Degree degrees = createDegree();

        when(degreeServiceMock.createDegree(degrees)).thenReturn(degrees);

        this.mockMvc
                .perform(post("/api/v1/degree/createNewDegree")
                        .accept(MediaType.APPLICATION_JSON)
                        .contentType(MediaType.APPLICATION_JSON) // Set the Content-Type header
                        .content(asJsonString(degrees))) // JSON data
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.degreeId").value(123L)) // Verify the degreeId in the response
                .andExpect(jsonPath("$.degreeName").value("Data Analytic")) // Verify the degreeName in the response
                .andExpect(jsonPath("$.courses[0].courseId").value(1L)) // Verify the courseId of the first course in the response
                .andExpect(jsonPath("$.courses[0].courseName").value("Associate of Science")); // Verify the courseName of the first course in the response
//                .andExpect(jsonPath("$.courses[1].courseId").value(2L)) // Verify the courseId of the second course in the response
//                .andExpect(jsonPath("$.courses[1].courseName").value("Associate of Arts")) // Verify the courseName of the second course in the response
//                .andExpect(jsonPath("$.college.collegeId").value(123456L)) // Verify the collegeId in the response
//                .andExpect(jsonPath("$.college.collegeName").value("Wayne University")); // Verify the collegeName in the response

    }






    /**
     * Helper method to convert an object to JSON string
     * @param obj object
     * @return obj
     */
    private String asJsonString(final Object obj) {
        try {
            final ObjectMapper mapper = new ObjectMapper();
            return mapper.writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * Auxiliary method for test
     *
     * @return
     */
    private static Degree createDegree() {
        Degree degree = new Degree();
        degree.setDegreeId(123L);
        degree.setDegreeName("Data Analytic");
        // Create a set of Course objects
        Set<Course> courses = new HashSet<>();
        Course course = new Course();
        course.setCourseId(1L);
        course.setCourseName("Associate of Science");
        courses.add(course);
        degree.setCourses(courses);
        return degree;
    }



}